AWSTemplateFormatVersion: 2010-09-09
Description: Kanban Frontend Board Template
Parameters:
  KanbanBoardWebsiteBucketName:
    Type: String
    Description: S3 Bucket name for Kanan Board website
    Default: kanban-board-997
  CodeBuildProjectName:
    Type: String
    Description: Name of the project in the CodeBuild
    Default: kanban-board-997
  GitHubRepositoryName:
    Type: String
    Description: Name of GitHub repository with Kanan Board frontend project
    Default: Personal-Kanban-Board-Frontend
  GitHubRepositoryURL:
    Type: String
    Description: URL for GitHub repository with Kanan Board frontend project
    Default: https://github.com/NowakArtur97/Personal-Kanban-Board-Frontend.git
  GitHubBranch:
    Type: String
    Description: GitHub branch with code for CodePipeline
    Default: main
  GitHubOAuthToken:
    Type: String
    Description: Thee GitHub Personal Access Token so CodePipeline can get the code
    Default: token
  GitHubBranchPattern:
    Type: String
    Description: GitHub branch with code for CodeBuild
    Default: ^refs/heads/main
  BuildSpecPath:
    Type: String
    Description: Path to buildspec.yml file for CodeBuild
    Default: aws/buildspec.yml
  CodeBuildImage:
    Type: String
    Description: Image for CodeBuild
    Default: aws/codebuild/amazonlinux2-x86_64-standard:5.0
    AllowedValues:
      - aws/codebuild/amazonlinux2-x86_64-standard:2.0
      - aws/codebuild/amazonlinux2-aarch64-standard:3.0
      - aws/codebuild/amazonlinux2-x86_64-standard:4.0
      - aws/codebuild/amazonlinux2-x86_64-standard:5.0
      - aws/codebuild/amazonlinux2-x86_64-standard:corretto11
      - aws/codebuild/amazonlinux2-x86_64-standard:corretto8
  CodeBuildComputeType:
    Type: String
    Description: Type of compute environment for CodeBuild
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
      - BUILD_GENERAL1_XLARGE
      - BUILD_GENERAL1_2XLARGE
      - BUILD_LAMBDA_1GB
      - BUILD_LAMBDA_2GB
      - BUILD_LAMBDA_4GB
      - BUILD_LAMBDA_8GB
      - BUILD_LAMBDA_10GB
  BuildArtifactsS3BucketName:
    Type: String
    Description: S3 Bucket name for build artifacts
    Default: artifacts-kanban-board-997
Resources:
  KanbanBoardWebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref KanbanBoardWebsiteS3Bucket
      PolicyDocument:
        Id: KanbanBoardWebsiteS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjectsAndObjectsVersions
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Resource: !Sub "arn:aws:s3:::${KanbanBoardWebsiteS3Bucket}/*"
  KanbanBoardWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref KanbanBoardWebsiteBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${KanbanBoardWebsiteS3Bucket}/*"
                  - !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}:*"
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${CodeBuildProjectName}-*"
  KanbanBoardFrontendProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: !Ref BuildSpecPath
      Environment:
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildImage
        ComputeType: !Ref CodeBuildComputeType
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub "/aws/codebuild/${CodeBuildProjectName}"
  BuildArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BuildArtifactsS3BucketName
  KanbanBoardFrontendPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelinePolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                  - "iam:PassRole"
                  - "sns:Publish"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codecommit:*"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:SetStackPolicy"
                Effect: Allow
                Resource: "*"
  KanbanBoardFrontendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodeBuildProjectName
      RoleArn: !GetAtt KanbanBoardFrontendPipelineRole.Arn
      PipelineType: "V2"
      ArtifactStore:
        Location: !Ref BuildArtifactsS3Bucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranch
                Owner: NowakArtur97
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: source-output-artifacts
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: source-output-artifacts
              OutputArtifacts:
                - Name: build-output-artifacts
              Configuration:
                ProjectName: !Ref KanbanBoardFrontendProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: build-output-artifacts
              Configuration:
                BucketName: !Ref KanbanBoardWebsiteS3Bucket
                Extract: true
              RunOrder: 1
  KanbanBoardFrontendGithubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: KanbanBoardFrontendGithubWebhook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: true
      TargetAction: Source
      TargetPipeline: !Ref KanbanBoardFrontendPipeline
      TargetPipelineVersion: !GetAtt KanbanBoardFrontendPipeline.Version
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
  S3BucketCleanerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BucketCleanerLambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${KanbanBoardWebsiteS3Bucket}"
                  - !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}"
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${KanbanBoardWebsiteS3Bucket}/*"
                  - !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}/*"
  S3BucketCleanerLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt S3BucketCleanerLambdaFunction.Arn
  S3BucketCleanerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketCleanerLambdaRole.Arn
      Environment:
        Variables:
          BUCKETS_TO_CLEAN:
            !Join [
              ",",
              [!Ref KanbanBoardWebsiteS3Bucket, !Ref BuildArtifactsS3Bucket],
            ]
      Code:
        ZipFile: |
          import os.path
          import boto3
          import cfnresponse

          BUCKETS_TO_CLEAN = os.environ['BUCKETS_TO_CLEAN'].split(",")

          s3 = boto3.resource('s3')

          def clear_bucket(bucketName):
              s3.Bucket(bucketName).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              if event['RequestType'] == 'Delete':
                  for bucketName in BUCKETS_TO_CLEAN:
                      try:
                          clear_bucket(bucketName)
                          print("Successfully cleared bucket: " + bucketName)
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print('Exception when cleaning bucket: ' + bucketName)
                          print(e)
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
Outputs:
  KanbanBoardWebsiteUrl:
    Description: Kanban Board website url
    Value: !GetAtt KanbanBoardWebsiteS3Bucket.WebsiteURL
